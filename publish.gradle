apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

task javadocGen(type: Javadoc) {
    source = sourceSets.main.allJava
    failOnError false
    options {
        noTimestamp true
        linkSource false
        docEncoding 'UTF-8'
        setMemberLevel JavadocMemberLevel.PUBLIC
        stylesheetFile file("$project.rootDir/assets/stylesheet.css")
    }
    destinationDir file("$buildDir/docs/")
    doFirst {
        classpath += fileTree(dir: "$buildDir/classes", include: "**/*.class")
    }
}

task sourcesJar(type: Jar) {
    dependsOn(JavaPlugin.CLASSES_TASK_NAME)
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadocGen) {
    classifier "javadoc"
    from javadocGen.destinationDir
}
javadocGen.finalizedBy javadocJar

artifacts {
    add("archives", sourcesJar)
    add("archives", javadocJar)
}

assemble.dependsOn(sourcesJar, javadocJar)
publish.dependsOn(build)

publishing {
    repositories {
        maven {
            url = uri("$buildDir/maven")
        }
    }
    publications {
        production(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                description = "Removes invalid objects during Gson parsing which are marked as required, yet null/empty."
                url = "https://venomvendor.github.io/NullDefense"
                packaging = "jar"
                inceptionYear = "2018"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "VenomVendor"
                        name = "VenomVendor"
                        email = "info@VenomVendor.com"
                        url = "https://VenomVendor.com"
                        timezone = "Asia/Kolkata"
                        organization = "Individual"
                    }
                }
                issueManagement {
                    system = "Github"
                    url = "https://github.com/VenomVendor/NullDefense/issues/"
                }
                distributionManagement {
                    downloadUrl = "http://dl.bintray.com/venomvendor/maven"
                    status = "deployed"
                }
                scm {
                    url = "https://github.com/VenomVendor/NullDefense"
                    connection = "scm:git:ssh://git@github.com:VenomVendor/NullDefense.git"
                    developerConnection = "scm:git:ssh://git@github.com:VenomVendor/NullDefense.git"
                    tag = "master"
                }
            }
        }
    }
}

bintray {
    def localProps = './local.properties'
    def signingKey

    println("Does local.properties exists: ${file(localProps).exists()}")
    if (file(localProps).exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file(localProps).newDataInputStream())

        user = properties.getProperty('bintrayUser')
        key = properties.getProperty('bintrayApiKey')
        signingKey = properties.getProperty('bintraySignKey')
    } else {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_API_KEY')
        signingKey = System.getenv('BINTRAY_SIGN_KEY')
    }

    def currentBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    def currentBranchHash = 'git rev-parse HEAD'.execute().text.trim()
    def masterBranchHash = 'git rev-parse origin/master'.execute().text.trim()

    def canPublish = currentBranchHash == masterBranchHash

    println("currentBranch: $currentBranch\n" +
            "currentBranchHash: $currentBranchHash\n " +
            "masterBranchHash: $masterBranchHash")
    println("dryRun: ${!canPublish}, publish: $canPublish")

    publications = ['production']
    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = 'NullDefense'
        userOrg = 'venomvendor'
        description = "Removes invalid objects during Gson parsing which are marked as required, yet null/empty."
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/VenomVendor/NullDefense.git'
        websiteUrl = 'https://venomvendor.github.io/NullDefense'
        issueTrackerUrl = 'https://github.com/VenomVendor/NullDefense/issues'
        labels = ['gson', 'library', 'null check', 'android']
        publicDownloadNumbers = true
        override = true
        dryRun = !canPublish
        publish = canPublish

        version {
            name = this.version
            desc = "Releasing v-${project.version}"
            released = new Date()
            vcsTag = this.version
            gpg {
                sign = true
                passphrase = signingKey
            }
        }
    }
}
